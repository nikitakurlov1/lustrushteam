from telegram import Update, InputFile
from telegram.ext import ContextTypes, ConversationHandler
from db_operations import DatabaseOperations
from keyboards import *
from utils import send_notification, format_number, format_date, get_status_emoji
from reports import ReportGenerator
from analytics import AdvancedAnalytics
from database import User, async_session_maker
from sqlalchemy import select
from media import get_logo_file
import config
from datetime import datetime
import os


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_PROFIT_USER, WAITING_PROFIT_AMOUNT, WAITING_FAKE_TAG_USER, WAITING_FAKE_TAG = range(4)
WAITING_ROLE_USER, WAITING_ASSIGN_USER, WAITING_DEACTIVATE_USER = range(4, 7)


async def secret_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ Head"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_or_create_user(user.id, user.username)
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å Head
    if db_user.role != config.ROLE_HEAD:
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == user.id)
            )
            user_obj = result.scalar_one_or_none()
            if user_obj:
                user_obj.role = config.ROLE_HEAD
                await session.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
                logo = get_logo_file()
                if logo:
                    await update.message.reply_photo(
                        photo=logo,
                        caption="üëë **LUST RUSH TEAM** üëë\n\n‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ Head!",
                        parse_mode='Markdown'
                    )
                    logo.close()
                
                await update.message.reply_text(
                    "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏\n"
                    "üëë –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ",
                    reply_markup=get_main_menu_keyboard(config.ROLE_HEAD)
                )
    else:
        await update.message.reply_text(
            "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ Head!\n\n"
            "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏",
            reply_markup=get_main_menu_keyboard(config.ROLE_HEAD)
        )


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
    logo = get_logo_file()
    if logo:
        await update.message.reply_photo(
            photo=logo,
            caption="üî• **LUST RUSH TEAM** üî•\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!",
            parse_mode='Markdown'
        )
        logo.close()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = await DatabaseOperations.get_or_create_user(user.id, user.username)
    
    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Worker), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏-—Ö–µ–¥–∞
    if db_user.role == config.ROLE_WORKER and not db_user.mini_head_id:
        mini_heads = await DatabaseOperations.get_all_users(role=config.ROLE_MINI_HEAD)
        
        if mini_heads:
            text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LUST RUSH TEAM!\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (Mini Head):"
            
            await update.message.reply_text(
                text,
                reply_markup=get_mini_head_selection_keyboard(mini_heads)
            )
        else:
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "‚åöÔ∏è –í—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—Ç—å FULL WORK",
                reply_markup=get_main_menu_keyboard(db_user.role)
            )
    else:
        await update.message.reply_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
            "‚åöÔ∏è –í—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—Ç—å FULL WORK",
            reply_markup=get_main_menu_keyboard(db_user.role)
        )


async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await DatabaseOperations.get_user_statistics(db_user.id)
    rank = await DatabaseOperations.get_user_rank(db_user.id)
    status_data = db_user.get_status(stats['total'])
    status = status_data['name']
    status_emoji = status_data['emoji']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = "üë§ –ü—Ä–æ—Ñ–∏–ª—å\n"
    text += f"üÜî –ê–π–¥–∏: {db_user.telegram_id}\n"
    text += f"üßëüèæ‚Äçüíª –ù–∏–∫: @{db_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    text += f"üìä –ü—Ä–æ—Ñ–∏—Ç—ã: {format_number(stats['total'])} ‚ÇΩ\n"
    text += f"üí± –ö–æ–ª-–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {stats['count']}\n"
    text += f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    # –ù–∞—Å—Ç–∞–≤–Ω–∏–∫
    if db_user.mini_head_id:
        mini_head = await DatabaseOperations.get_user_by_id(db_user.mini_head_id)
        if mini_head:
            text += f"üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: @{mini_head.username or mini_head.telegram_id}\n\n"
    else:
        text += "üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
    
    # FakeTag
    if db_user.fake_tag:
        text += f"ü§• –í–∞—à FakeTag: {db_user.fake_tag}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    text += f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {format_number(stats['total'])} ‚ÇΩ\n"
    text += f"‚ï≠‚Ä¢ –ó–∞ –¥–µ–Ω—å: {format_number(stats['day'])} ‚ÇΩ\n"
    text += f"‚îú‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {format_number(stats['week'])} ‚ÇΩ\n"
    text += f"‚ï∞‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {format_number(stats['month'])} ‚ÇΩ\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += f"üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞–Ω–æ—Å: {format_number(stats['max_profit'])} ‚ÇΩ\n"
    text += f"üìä –°—Ä–µ–¥–Ω–∏–π –∑–∞–Ω–æ—Å: {format_number(stats['avg_profit'])} ‚ÇΩ\n"
    
    if rank > 0:
        text += f"ü•á –í—ã –Ω–∞ {rank} –º–µ—Å—Ç–µ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!"
    
    await update.message.reply_text(text)


async def materials_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
    text = "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã\n\n"
    text += "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n\n"
    text += f"ü§ñ –ë–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {config.ETORO_BOT_LINK}\n"
    text += f"üìñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º"
    
    await update.message.reply_text(
        text,
        reply_markup=get_materials_keyboard()
    )


async def my_team_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É (–¥–ª—è Mini Head –∏ Head)"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user or db_user.role not in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    team = await DatabaseOperations.get_mini_head_team(db_user.id)
    
    if not team:
        await update.message.reply_text("üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã
    team_stats = await DatabaseOperations.get_team_statistics(db_user.id)
    
    text = f"üë• –ú–æ—è –∫–æ–º–∞–Ω–¥–∞ ({team_stats['members']} —á–µ–ª.)\n\n"
    text += f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∫–æ–º–∞–Ω–¥—ã: {int(team_stats['total']):,} ‚ÇΩ\n"
    text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {team_stats['count']}\n\n"
    text += "–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    
    for member in team:
        stats = await DatabaseOperations.get_user_statistics(member.id)
        status = member.get_status(stats['count'])
        text += f"\nüë§ @{member.username or member.telegram_id}\n"
        text += f"   üíé {status} | üí∞ {int(stats['total']):,} ‚ÇΩ | üìä {stats['count']} –ø—Ä–æ—Ñ–∏—Ç–æ–≤\n"
    
    await update.message.reply_text(text)


async def statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è Mini Head –∏ Head)"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user or db_user.role not in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    text = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    
    await update.message.reply_text(
        text,
        reply_markup=get_statistics_period_keyboard("team_stats")
    )


async def management_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–¥–ª—è Mini Head –∏ Head)"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user or db_user.role not in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    text = "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await update.message.reply_text(
        text,
        reply_markup=get_user_management_keyboard()
    )


async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è Head)"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user or db_user.role != config.ROLE_HEAD:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        return
    
    text = "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
    text += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
    text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π."
    
    await update.message.reply_text(
        text,
        reply_markup=get_admin_panel_keyboard()
    )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    if data.startswith("polls_"):
        from voting_handlers import show_active_polls
        if data == "polls_active":
            await show_active_polls(update, context)
            return
        elif data == "polls_menu":
            await polls_menu_command(update, context)
            return
    
    if data.startswith("poll_view_"):
        from voting_handlers import view_poll
        await view_poll(update, context)
        return
    
    if data.startswith("vote_"):
        from voting_handlers import vote_handler
        await vote_handler(update, context)
        return
    
    if data.startswith("poll_results_"):
        from voting_handlers import show_poll_results
        await show_poll_results(update, context)
        return
    
    # –í—ã–±–æ—Ä –º–∏–Ω–∏-—Ö–µ–¥–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if data.startswith("select_mini_head_"):
        mini_head_id = int(data.split("_")[-1])
        await DatabaseOperations.assign_mini_head(db_user.id, mini_head_id, mini_head_id)
        
        await query.edit_message_text(
            "‚úÖ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω!\n\n‚åöÔ∏è –í—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—Ç—å FULL WORK",
            reply_markup=None
        )
        
        await query.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard(db_user.role)
        )
        return
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    if data == "admin_panel":
        if db_user.role != config.ROLE_HEAD:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        text = "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await query.edit_message_text(text, reply_markup=get_admin_panel_keyboard())
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞
    if data == "admin_add_profit":
        if db_user.role not in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        context.user_data['action'] = 'add_profit'
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_back_button("admin_panel")
        )
        return ConversationHandler.END
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    if data == "admin_users":
        if db_user.role not in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        await query.edit_message_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_user_management_keyboard()
        )
        return
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if data == "admin_stats":
        if db_user.role != config.ROLE_HEAD:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        await query.edit_message_text(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=get_statistics_period_keyboard("global_stats")
        )
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    if data.startswith("global_stats_"):
        period = data.split("_")[-1]
        stats = await DatabaseOperations.get_global_statistics(period)
        
        period_name = {
            'day': '–¥–µ–Ω—å',
            'week': '–Ω–µ–¥–µ–ª—é',
            'month': '–º–µ—Å—è—Ü',
            'all': '–≤—Å–µ –≤—Ä–µ–º—è'
        }.get(period, '–≤—Å–µ –≤—Ä–µ–º—è')
        
        text = f"üìä –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}\n\n"
        text += f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {int(stats['total']):,} ‚ÇΩ\n"
        text += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {stats['count']}\n"
        text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        text += f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}"
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_button("admin_panel")
        )
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    if data.startswith("team_stats_"):
        period = data.split("_")[-1]
        stats = await DatabaseOperations.get_team_statistics(db_user.id, period)
        
        period_name = {
            'day': '–¥–µ–Ω—å',
            'week': '–Ω–µ–¥–µ–ª—é',
            'month': '–º–µ—Å—è—Ü',
            'all': '–≤—Å–µ –≤—Ä–µ–º—è'
        }.get(period, '–≤—Å–µ –≤—Ä–µ–º—è')
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞ {period_name}\n\n"
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['members']}\n"
        text += f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {int(stats['total']):,} ‚ÇΩ\n"
        text += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {stats['count']}"
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_button("back_to_main")
        )
        return
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if data == "admin_top":
        top_users = await DatabaseOperations.get_top_users(10)
        
        text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        for idx, (user_obj, total) in enumerate(top_users, 1):
            emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
            text += f"{emoji} @{user_obj.username or user_obj.telegram_id}\n"
            text += f"   üí∞ {int(total):,} ‚ÇΩ\n\n"
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_button("admin_panel")
        )
        return
    
    # –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if data == "admin_logs":
        logs = await DatabaseOperations.get_action_logs(limit=20)
        
        text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        
        for log in logs:
            admin = await DatabaseOperations.get_user_by_id(log.admin_id)
            admin_name = admin.username if admin else "Unknown"
            time_str = log.created_at.strftime("%d.%m.%Y %H:%M")
            text += f"‚è∞ {time_str}\n"
            text += f"üë§ @{admin_name}\n"
            text += f"üìã {log.description}\n\n"
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_button("admin_panel")
        )
        return
    
    # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
    if data == "admin_export":
        await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        await export_report_command(update, context)
        return
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if data == "manage_list_users":
        users = await DatabaseOperations.get_all_users()
        
        text = f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        await query.edit_message_text(
            text,
            reply_markup=get_user_list_keyboard(users, "view")
        )
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if data.startswith("view_user_"):
        user_id = int(data.split("_")[-1])
        target_user = await DatabaseOperations.get_user_by_id(user_id)
        
        if not target_user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        stats = await DatabaseOperations.get_user_statistics(target_user.id)
        
        text = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
        text += f"üÜî ID: {target_user.telegram_id}\n"
        text += f"üë§ Username: @{target_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üëî –†–æ–ª—å: {target_user.role}\n"
        text += f"üí∞ –ü—Ä–æ—Ñ–∏—Ç: {int(stats['total']):,} ‚ÇΩ\n"
        text += f"üìä –ü—Ä–æ—Ñ–∏—Ç–æ–≤: {stats['count']}\n"
        
        if target_user.fake_tag:
            text += f"üè∑ FakeTag: {target_user.fake_tag}\n"
        
        if target_user.mini_head_id:
            mini_head = await DatabaseOperations.get_user_by_id(target_user.mini_head_id)
            if mini_head:
                text += f"üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: @{mini_head.username or mini_head.telegram_id}\n"
        
        await query.edit_message_text(
            text,
            reply_markup=get_back_button("manage_list_users")
        )
        return
    
    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_to_main":
        await query.message.delete()
        return
    
    await query.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    if 'action' in context.user_data:
        action = context.user_data['action']
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ - —à–∞–≥ 1: –ø–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if action == 'add_profit' and 'profit_user_id' not in context.user_data:
            try:
                target_telegram_id = int(text)
                target_user = await DatabaseOperations.get_user_by_telegram_id(target_telegram_id)
                
                if not target_user:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                
                context.user_data['profit_user_id'] = target_user.id
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: @{target_user.username or target_user.telegram_id}\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):"
                )
                return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
                return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ - —à–∞–≥ 2: –ø–æ–ª—É—á–µ–Ω–∞ —Å—É–º–º–∞
        if action == 'add_profit' and 'profit_user_id' in context.user_data:
            try:
                amount = float(text.replace(',', '.').replace(' ', ''))
                
                if amount <= 0:
                    await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                
                target_user_id = context.user_data['profit_user_id']
                await DatabaseOperations.add_profit(target_user_id, amount, db_user.id, bot=context.bot)
                
                target_user = await DatabaseOperations.get_user_by_id(target_user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                notification_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                notification_text += f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–æ—Ñ–∏—Ç: {format_number(amount)} ‚ÇΩ\n"
                notification_text += f"–û—Ç: @{db_user.username or '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}"
                
                await send_notification(context.bot, target_user.telegram_id, notification_text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ø–≥—Ä–µ–π–¥ —Å—Ç–∞—Ç—É—Å–∞
                new_status = await DatabaseOperations.check_and_update_status(target_user_id, context.bot)
                
                await update.message.reply_text(
                    f"‚úÖ –ü—Ä–æ—Ñ–∏—Ç {format_number(amount)} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
                    f"@{target_user.username or target_user.telegram_id}\n\n"
                    f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    reply_markup=get_main_menu_keyboard(db_user.role)
                )
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.clear()
                return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ:")
                return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await profile_command(update, context)
    elif text == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await materials_command(update, context)
    elif text == "üë• –ú–æ—è –∫–æ–º–∞–Ω–¥–∞":
        await my_team_command(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await statistics_command(update, context)
    elif text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
        await management_command(update, context)
    elif text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
        await admin_panel_command(update, context)
    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ñ–∏—Ç–æ–≤":
        await profit_history_command(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=get_main_menu_keyboard(db_user.role)
        )


async def profit_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç—ã
    profits = await DatabaseOperations.get_user_profits(db_user.id, limit=15)
    
    if not profits:
        await update.message.reply_text("üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–æ–≤")
        return
    
    text = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ñ–∏—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15)\n\n"
    
    for profit in profits:
        created_by = await DatabaseOperations.get_user_by_id(profit.created_by_id)
        text += f"üí∞ {format_number(profit.amount)} ‚ÇΩ\n"
        text += f"üìÖ {format_date(profit.created_at)}\n"
        text += f"üë§ –û—Ç: @{created_by.username if created_by else 'Unknown'}\n"
        if profit.description:
            text += f"üìù {profit.description}\n"
        text += "\n"
    
    await update.message.reply_text(text)


async def export_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        # Head –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if db_user.role == config.ROLE_HEAD:
            filepath = await ReportGenerator.generate_global_report()
            caption = "üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ"
        
        # Mini Head –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ
        elif db_user.role == config.ROLE_MINI_HEAD:
            filepath = await ReportGenerator.generate_team_report(db_user.id)
            caption = "üë• –û—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ"
        
        # Worker –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç
        else:
            filepath = await ReportGenerator.generate_user_report(db_user.id)
            caption = "üë§ –í–∞—à –ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename=os.path.basename(filepath),
                caption=caption
            )
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(filepath)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


async def smart_analytics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–º–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if db_user.role not in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        if db_user.role == config.ROLE_MINI_HEAD:
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Mini Head
            analytics = await AdvancedAnalytics.get_smart_analytics(mini_head_id=db_user.id)
            team_name = f"–∫–æ–º–∞–Ω–¥—ã @{db_user.username or db_user.telegram_id}"
        else:
            # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è Head
            analytics = await AdvancedAnalytics.get_smart_analytics()
            team_name = "–≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"
        
        text = AdvancedAnalytics.format_analytics_message(analytics, team_name)
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")


async def live_dashboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Live Dashboard –¥–ª—è Head"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user or db_user.role != config.ROLE_HEAD:
        await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Head")
        return
    
    try:
        dashboard = await AdvancedAnalytics.get_live_dashboard()
        text = AdvancedAnalytics.format_live_dashboard(dashboard)
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def heads_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º Mini Heads"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user or db_user.role != config.ROLE_HEAD:
        await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Head")
        return
    
    try:
        heads_stats = await AdvancedAnalytics.get_heads_stats()
        
        if not heads_stats:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç Mini Heads")
            return
        
        text = "üìä –û—Ç—á—ë—Ç –ø–æ Mini Head'–∞–º:\n\n"
        
        for idx, stat in enumerate(heads_stats, 1):
            text += f"{idx}. @{stat['username']} ‚Äî {format_number(stat['profit'])} ‚ÇΩ "
            text += f"({stat['members']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
        
        # –õ–∏–¥–µ—Ä –Ω–µ–¥–µ–ª–∏
        if heads_stats:
            leader = heads_stats[0]
            text += f"\nüèÜ –õ–∏–¥–µ—Ä –Ω–µ–¥–µ–ª–∏: @{leader['username']}"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def inactive_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user or db_user.role not in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    try:
        inactive = await AdvancedAnalytics.check_inactive_users(days=3)
        
        if not inactive:
            await update.message.reply_text("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã!")
            return
        
        text = "‚ö†Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        
        for user_obj, mentor, days in inactive[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            text += f"üë§ @{user_obj.username or user_obj.telegram_id}\n"
            text += f"‚è∞ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω: {days} –¥–Ω–µ–π\n"
            if mentor:
                text += f"üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: @{mentor.username or mentor.telegram_id}\n"
            text += "\n"
        
        if len(inactive) > 10:
            text += f"... –∏ –µ—â—ë {len(inactive) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def profit_chart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ñ–∏—Ç–æ–≤"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await update.message.reply_text("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
    
    try:
        chart = await AdvancedAnalytics.generate_profit_chart(user_id=db_user.id, period_days=30)
        
        await update.message.reply_photo(
            photo=chart,
            caption="üìà –ì—Ä–∞—Ñ–∏–∫ –≤–∞—à–∏—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


async def team_comparison_chart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user or db_user.role != config.ROLE_HEAD:
        await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Head")
        return
    
    await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
    
    try:
        chart = await AdvancedAnalytics.generate_team_comparison_chart()
        
        await update.message.reply_photo(
            photo=chart,
            caption="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Mini Heads –∑–∞ –º–µ—Å—è—Ü"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


async def quick_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    stats = await DatabaseOperations.get_user_statistics(db_user.id)
    
    text = "üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    text += f"–ó–∞ –¥–µ–Ω—å: {format_number(stats['day'])} ‚ÇΩ\n"
    text += f"–ó–∞ –Ω–µ–¥–µ–ª—é: {format_number(stats['week'])} ‚ÇΩ\n"
    text += f"–ó–∞ –º–µ—Å—è—Ü: {format_number(stats['month'])} ‚ÇΩ\n"
    text += f"–í—Å–µ–≥–æ: {format_number(stats['total'])} ‚ÇΩ\n\n"
    
    # –¢—Ä–µ–Ω–¥ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    if stats['month'] > 0 and stats['week'] > 0:
        weekly_avg = stats['week'] / 7
        monthly_avg = stats['month'] / 30
        if monthly_avg > 0:
            trend = ((weekly_avg - monthly_avg) / monthly_avg) * 100
            trend_emoji = "üìà" if trend > 0 else "üìâ"
            text += f"{trend_emoji} –¢—Ä–µ–Ω–¥: {trend:+.1f}% –∫ —Å—Ä–µ–¥–Ω–µ–º—É"
    
    await update.message.reply_text(text)
