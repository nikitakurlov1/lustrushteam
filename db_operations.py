from sqlalchemy import select, func, and_, or_, desc
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Tuple
from database import User, Profit, ActionLog, async_session_maker
import config
from telegram import Bot


class DatabaseOperations:
    
    @staticmethod
    async def get_or_create_user(telegram_id: int, username: Optional[str] = None) -> User:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                user = User(
                    telegram_id=telegram_id,
                    username=username,
                    role=config.ROLE_WORKER
                )
                session.add(user)
                await session.commit()
                await session.refresh(user)
            
            return user
    
    @staticmethod
    async def get_user_by_telegram_id(telegram_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            return result.scalar_one_or_none()
    
    @staticmethod
    async def get_user_by_id(user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            return result.scalar_one_or_none()
    
    @staticmethod
    async def update_user_role(user_id: int, new_role: str, admin_id: int) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                old_role = user.role
                user.role = new_role
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                log = ActionLog(
                    admin_id=admin_id,
                    action_type='role_change',
                    description=f'–ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username or user.telegram_id} —Å {old_role} –Ω–∞ {new_role}',
                    target_user_id=user.telegram_id
                )
                session.add(log)
                
                await session.commit()
                return True
            return False
    
    @staticmethod
    async def assign_mini_head(worker_id: int, mini_head_id: int, admin_id: int) -> bool:
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∏–Ω–∏-—Ö–µ–¥–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫—É"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.id == worker_id)
            )
            worker = result.scalar_one_or_none()
            
            if worker:
                worker.mini_head_id = mini_head_id
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                log = ActionLog(
                    admin_id=admin_id,
                    action_type='assign_mini_head',
                    description=f'–ù–∞–∑–Ω–∞—á–µ–Ω –º–∏–Ω–∏-—Ö–µ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {worker.username or worker.telegram_id}',
                    target_user_id=worker.telegram_id
                )
                session.add(log)
                
                await session.commit()
                return True
            return False
    
    @staticmethod
    async def check_and_update_status(user_id: int, bot: Optional[Bot] = None) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è"""
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–æ–≤
            result = await session.execute(
                select(func.sum(Profit.amount)).where(Profit.user_id == user_id)
            )
            total_profit = result.scalar() or 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            new_status_data = user.get_status(total_profit)
            new_status = new_status_data['name']
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if user.current_status != new_status:
                old_status = user.current_status
                user.current_status = new_status
                await session.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
                if bot:
                    from media import get_logo_file
                    emoji = new_status_data['emoji']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
                    logo = get_logo_file()
                    if logo:
                        caption = f"üéâ **LUST RUSH TEAM** üéâ\n\n"
                        caption += f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n"
                        caption += f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {emoji} **{new_status}**!\n"
                        caption += f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™\n\n"
                        caption += f"–í–∞—à –æ–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {int(total_profit):,} ‚ÇΩ"
                        
                        await bot.send_photo(
                            chat_id=user.telegram_id,
                            photo=logo,
                            caption=caption,
                            parse_mode='Markdown'
                        )
                        logo.close()
                
                return new_status
            
            return None
    
    @staticmethod
    async def add_profit(user_id: int, amount: float, admin_id: int, description: Optional[str] = None, bot: Optional[Bot] = None) -> Profit:
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        async with async_session_maker() as session:
            profit = Profit(
                user_id=user_id,
                amount=amount,
                description=description,
                created_by_id=admin_id
            )
            session.add(profit)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            user = await DatabaseOperations.get_user_by_id(user_id)
            log = ActionLog(
                admin_id=admin_id,
                action_type='add_profit',
                description=f'–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏—Ç {amount} ‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username if user else user_id}',
                target_user_id=user.telegram_id if user else None
            )
            session.add(log)
            
            await session.commit()
            await session.refresh(profit)
            return profit
    
    @staticmethod
    async def delete_profit(profit_id: int, admin_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(Profit).where(Profit.id == profit_id)
            )
            profit = result.scalar_one_or_none()
            
            if profit:
                user = await DatabaseOperations.get_user_by_id(profit.user_id)
                
                log = ActionLog(
                    admin_id=admin_id,
                    action_type='delete_profit',
                    description=f'–£–¥–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏—Ç {profit.amount} ‚ÇΩ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username if user else profit.user_id}',
                    target_user_id=user.telegram_id if user else None
                )
                session.add(log)
                
                await session.delete(profit)
                await session.commit()
                return True
            return False
    
    @staticmethod
    async def get_user_profits(user_id: int, limit: int = 20) -> List[Profit]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(Profit).where(Profit.user_id == user_id)
                .order_by(desc(Profit.created_at))
                .limit(limit)
            )
            return result.scalars().all()
    
    @staticmethod
    async def get_user_statistics(user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with async_session_maker() as session:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result = await session.execute(
                select(
                    func.sum(Profit.amount).label('total'),
                    func.count(Profit.id).label('count'),
                    func.max(Profit.amount).label('max_profit'),
                    func.avg(Profit.amount).label('avg_profit')
                ).where(Profit.user_id == user_id)
            )
            stats = result.one()
            
            # –ó–∞ –¥–µ–Ω—å
            day_ago = datetime.utcnow() - timedelta(days=1)
            result = await session.execute(
                select(func.sum(Profit.amount)).where(
                    and_(Profit.user_id == user_id, Profit.created_at >= day_ago)
                )
            )
            day_profit = result.scalar() or 0
            
            # –ó–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.utcnow() - timedelta(days=7)
            result = await session.execute(
                select(func.sum(Profit.amount)).where(
                    and_(Profit.user_id == user_id, Profit.created_at >= week_ago)
                )
            )
            week_profit = result.scalar() or 0
            
            # –ó–∞ –º–µ—Å—è—Ü
            month_ago = datetime.utcnow() - timedelta(days=30)
            result = await session.execute(
                select(func.sum(Profit.amount)).where(
                    and_(Profit.user_id == user_id, Profit.created_at >= month_ago)
                )
            )
            month_profit = result.scalar() or 0
            
            return {
                'total': stats.total or 0,
                'count': stats.count or 0,
                'max_profit': stats.max_profit or 0,
                'avg_profit': stats.avg_profit or 0,
                'day': day_profit,
                'week': week_profit,
                'month': month_profit
            }
    
    @staticmethod
    async def get_user_rank(user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(
                select(
                    Profit.user_id,
                    func.sum(Profit.amount).label('total')
                ).group_by(Profit.user_id).order_by(desc('total'))
            )
            rankings = result.all()
            
            for idx, (uid, _) in enumerate(rankings, 1):
                if uid == user_id:
                    return idx
            return 0
    
    @staticmethod
    async def get_all_users(role: Optional[str] = None) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ —Ä–æ–ª–∏"""
        async with async_session_maker() as session:
            query = select(User).where(User.is_active == True)
            if role:
                query = query.where(User.role == role)
            
            result = await session.execute(query)
            return result.scalars().all()
    
    @staticmethod
    async def get_mini_head_team(mini_head_id: int) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –º–∏–Ω–∏-—Ö–µ–¥–∞"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(
                    and_(User.mini_head_id == mini_head_id, User.is_active == True)
                )
            )
            return result.scalars().all()
    
    @staticmethod
    async def get_team_statistics(mini_head_id: int, period: str = 'all') -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –º–∏–Ω–∏-—Ö–µ–¥–∞"""
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            team_result = await session.execute(
                select(User.id).where(User.mini_head_id == mini_head_id)
            )
            team_ids = [row[0] for row in team_result.all()]
            
            if not team_ids:
                return {'total': 0, 'count': 0, 'members': 0}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            query = select(
                func.sum(Profit.amount).label('total'),
                func.count(Profit.id).label('count')
            ).where(Profit.user_id.in_(team_ids))
            
            if period == 'day':
                query = query.where(Profit.created_at >= datetime.utcnow() - timedelta(days=1))
            elif period == 'week':
                query = query.where(Profit.created_at >= datetime.utcnow() - timedelta(days=7))
            elif period == 'month':
                query = query.where(Profit.created_at >= datetime.utcnow() - timedelta(days=30))
            
            result = await session.execute(query)
            stats = result.one()
            
            return {
                'total': stats.total or 0,
                'count': stats.count or 0,
                'members': len(team_ids)
            }
    
    @staticmethod
    async def get_global_statistics(period: str = 'all') -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        async with async_session_maker() as session:
            query = select(
                func.sum(Profit.amount).label('total'),
                func.count(Profit.id).label('count'),
                func.count(func.distinct(Profit.user_id)).label('active_users')
            )
            
            if period == 'day':
                query = query.where(Profit.created_at >= datetime.utcnow() - timedelta(days=1))
            elif period == 'week':
                query = query.where(Profit.created_at >= datetime.utcnow() - timedelta(days=7))
            elif period == 'month':
                query = query.where(Profit.created_at >= datetime.utcnow() - timedelta(days=30))
            
            result = await session.execute(query)
            stats = result.one()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users_result = await session.execute(
                select(func.count(User.id)).where(User.is_active == True)
            )
            total_users = total_users_result.scalar()
            
            return {
                'total': stats.total or 0,
                'count': stats.count or 0,
                'active_users': stats.active_users or 0,
                'total_users': total_users or 0
            }
    
    @staticmethod
    async def get_top_users(limit: int = 10) -> List[Tuple[User, float]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ—Ñ–∏—Ç–∞–º"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(
                    User,
                    func.sum(Profit.amount).label('total')
                ).join(Profit).group_by(User.id).order_by(desc('total')).limit(limit)
            )
            return result.all()
    
    @staticmethod
    async def get_action_logs(admin_id: Optional[int] = None, limit: int = 50) -> List[ActionLog]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        async with async_session_maker() as session:
            query = select(ActionLog).order_by(desc(ActionLog.created_at)).limit(limit)
            
            if admin_id:
                query = query.where(ActionLog.admin_id == admin_id)
            
            result = await session.execute(query)
            return result.scalars().all()
    
    @staticmethod
    async def deactivate_user(user_id: int, admin_id: int) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                user.is_active = False
                
                log = ActionLog(
                    admin_id=admin_id,
                    action_type='deactivate_user',
                    description=f'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.telegram_id}',
                    target_user_id=user.telegram_id
                )
                session.add(log)
                
                await session.commit()
                return True
            return False
    
    @staticmethod
    async def set_fake_tag(user_id: int, fake_tag: str, admin_id: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FakeTag –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                user.fake_tag = fake_tag
                
                log = ActionLog(
                    admin_id=admin_id,
                    action_type='set_fake_tag',
                    description=f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω FakeTag {fake_tag} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username or user.telegram_id}',
                    target_user_id=user.telegram_id
                )
                session.add(log)
                
                await session.commit()
                return True
            return False
