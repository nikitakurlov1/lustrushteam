from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from voting import VotingSystem
from db_operations import DatabaseOperations
from utils import format_number
import config

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
POLL_TITLE, POLL_DESC, POLL_TYPE, POLL_OPTIONS, POLL_DURATION, POLL_TARGET = range(6)


async def polls_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    active_polls = await VotingSystem.get_active_polls()
    
    text = "üó≥ **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è**\n\n"
    text += f"üì¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {len(active_polls)}\n\n"
    
    keyboard = []
    
    if active_polls:
        keyboard.append([InlineKeyboardButton("üì¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", callback_data="polls_active")])
    
    keyboard.append([InlineKeyboardButton("üìú –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", callback_data="polls_completed")])
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è Head –∏ Mini Head
    if db_user.role in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="poll_create")])
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="polls_manage")])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–∏—è
    stats = await VotingSystem.get_user_polls_stats(db_user.id)
    text += f"üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['participated']} –∏–∑ {stats['total_active']} ({stats['activity_percent']:.0f}%)"
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_active_polls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    active_polls = await VotingSystem.get_active_polls()
    
    if not active_polls:
        await query.edit_message_text(
            "üì¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="polls_menu")
            ]])
        )
        return
    
    text = "üì¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n"
    
    keyboard = []
    for poll in active_polls[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        creator = await VotingSystem.get_poll_creator(poll.creator_id)
        creator_name = creator.username if creator else "Admin"
        
        text += f"üó≥ {poll.title}\n"
        text += f"   –û—Ç: @{creator_name}\n"
        if poll.end_at:
            text += f"   –î–æ: {poll.end_at.strftime('%d.%m.%Y')}\n"
        text += "\n"
        
        keyboard.append([InlineKeyboardButton(
            f"üó≥ {poll.title[:30]}...",
            callback_data=f"poll_view_{poll.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="polls_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def view_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    poll_id = int(query.data.split("_")[-1])
    
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    poll = await VotingSystem.get_poll(poll_id)
    if not poll:
        await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    options = await VotingSystem.get_poll_options(poll_id)
    user_vote = await VotingSystem.get_user_vote(poll_id, db_user.id)
    
    text = VotingSystem.format_poll_message(poll, options, user_vote)
    
    keyboard = []
    
    # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if not user_vote and poll.is_active:
        for option in options:
            keyboard.append([InlineKeyboardButton(
                f"{option.option_order}Ô∏è‚É£ {option.option_text}",
                callback_data=f"vote_{poll_id}_{option.id}"
            )])
    
    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    keyboard.append([InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"poll_results_{poll_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="polls_active")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split("_")
    poll_id = int(parts[1])
    option_id = int(parts[2])
    
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    # –ì–æ–ª–æ—Å—É–µ–º
    success = await VotingSystem.vote(poll_id, db_user.id, option_id)
    
    if success:
        poll = await VotingSystem.get_poll(poll_id)
        option = await VotingSystem.get_poll_options(poll_id)
        voted_option = next((opt for opt in option if opt.id == option_id), None)
        
        await query.answer("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_vote = await VotingSystem.get_user_vote(poll_id, db_user.id)
        text = VotingSystem.format_poll_message(poll, option, user_vote)
        
        keyboard = [
            [InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"poll_results_{poll_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="polls_active")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.answer("‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!", show_alert=True)


async def show_poll_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    poll_id = int(query.data.split("_")[-1])
    
    results_data = await VotingSystem.get_poll_results(poll_id)
    
    if not results_data:
        await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    text = VotingSystem.format_results_message(results_data)
    
    keyboard = [
        [InlineKeyboardButton("üó≥ –ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é", callback_data=f"poll_view_{poll_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="polls_active")]
    ]
    
    # –î–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–ª–∏ Head - –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    poll = results_data['poll']
    if db_user.role == config.ROLE_HEAD or db_user.id == poll.creator_id:
        if not poll.is_anonymous:
            keyboard.insert(0, [InlineKeyboardButton("üë• –ö—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–ª", callback_data=f"poll_voters_{poll_id}")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def create_poll_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if db_user.role not in [config.ROLE_HEAD, config.ROLE_MINI_HEAD]:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π", show_alert=True)
        return
    
    await query.edit_message_text(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è**\n\n"
        "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
        parse_mode='Markdown'
    )
    
    return POLL_TITLE


async def top_voters_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å—É—é—â–∏—Ö"""
    top = await VotingSystem.get_top_voters(limit=10)
    
    if not top:
        await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö")
        return
    
    text = "üî• –¢–æ–ø –≥–æ–ª–æ—Å—É—é—â–∏—Ö:\n\n"
    
    for idx, (user, count) in enumerate(top, 1):
        emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
        text += f"{emoji} @{user.username or user.telegram_id} ‚Äî {count} –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π\n"
    
    await update.message.reply_text(text)


async def my_polls_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    db_user = await DatabaseOperations.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    stats = await VotingSystem.get_user_polls_stats(db_user.id)
    
    text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:\n\n"
    text += f"‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤: {stats['participated']} –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö\n"
    text += f"üì¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['total_active']}\n"
    text += f"üìà –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['activity_percent']:.0f}%\n"
    
    if stats['activity_percent'] == 100:
        text += "\nüèÜ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤–æ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö!"
    elif stats['activity_percent'] >= 80:
        text += "\nüí™ –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif stats['activity_percent'] >= 50:
        text += "\nüìä –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!"
    else:
        text += "\n‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö!"
    
    await update.message.reply_text(text)
